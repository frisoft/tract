version 1.0;

extension tract_registry tract_core;
extension tract_registry tract_pulse;

fragment scan_body_0(
    i"fastlstm1.c": tensor<scalar>,
    i"fastlstm1.r": tensor<scalar>,
    i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256": tensor<scalar>,
    i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768": tensor<scalar>,
    i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512": tensor<scalar>,
    i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024": tensor<scalar>,
    i"fastlstm1.four_parts.W.k-256-384.split-over-1.0..256_a": tensor<scalar>,
    i"fastlstm1.four_parts.W.k-256-384.split-over-1.256..512_a": tensor<scalar>,
    i"fastlstm1.four_parts.W.k-256-384.split-over-1.512..768_a": tensor<scalar>,
    i"fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024_a": tensor<scalar>,
    i"fastlstm1.four_parts.split-1-over-1.0..256.slice": tensor<scalar>,
    i"fastlstm1.four_parts.split-1-over-1.256..512.slice": tensor<scalar>,
    i"fastlstm1.four_parts.split-1-over-1.512..768.slice": tensor<scalar>,
    i"fastlstm1.four_parts.split-1-over-1.768..1024.slice": tensor<scalar>,
    i"fastlstm1.h_new.W.split-over-1.0..128_a": tensor<scalar>,
    i"fastlstm1.h_new.split-1-over-1.0..128.slice": tensor<scalar>,
    i"fastlstm1.peephole0.mul.fix-rank-0-1": tensor<scalar>,
    i"fastlstm1.peephole1.mul.fix-rank-0-1": tensor<scalar>,
    i"fastlstm1.peephole2.mul.fix-rank-0-1": tensor<scalar>
) -> (i"fastlstm1.c_new": tensor<scalar>, i"fastlstm1.r_new": tensor<scalar>, i"fastlstm1.m": tensor<scalar>)
{
  i"fastlstm1.peephole0.mul" = mul(i"fastlstm1.peephole0.mul.fix-rank-0-1", i"fastlstm1.c");
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.0..256" = matmul(i"fastlstm1.r", i"fastlstm1.four_parts.W.k-256-384.split-over-1.0..256_a", transposeA = false, transposeB = false);
  i"fastlstm1.four_parts.W.k-add-0.split-over-1.0..256" = add(i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256", i"fastlstm1.four_parts.W.k-256-384.split-over-1.0..256");
  i"fastlstm1.four_parts.split-over-1.0..256" = add(i"fastlstm1.four_parts.W.k-add-0.split-over-1.0..256", i"fastlstm1.four_parts.split-1-over-1.0..256.slice");
  i"fastlstm1.peephole0.output" = add(i"fastlstm1.peephole0.mul", i"fastlstm1.four_parts.split-over-1.0..256");
  i"fastlstm1.peephole0.output.nolin" = sigmoid(i"fastlstm1.peephole0.output");
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.512..768" = matmul(i"fastlstm1.r", i"fastlstm1.four_parts.W.k-256-384.split-over-1.512..768_a", transposeA = false, transposeB = false);
  i"fastlstm1.four_parts.W.k-add-0.split-over-1.512..768" = add(i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768", i"fastlstm1.four_parts.W.k-256-384.split-over-1.512..768");
  i"fastlstm1.four_parts.split-over-1.512..768" = add(i"fastlstm1.four_parts.W.k-add-0.split-over-1.512..768", i"fastlstm1.four_parts.split-1-over-1.512..768.slice");
  i"fastlstm1.four_parts.j.nolin" = tanh(i"fastlstm1.four_parts.split-over-1.512..768");
  i"fastlstm1.c_update" = mul(i"fastlstm1.peephole0.output.nolin", i"fastlstm1.four_parts.j.nolin");
  i"fastlstm1.peephole1.mul" = mul(i"fastlstm1.peephole1.mul.fix-rank-0-1", i"fastlstm1.c");
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.256..512" = matmul(i"fastlstm1.r", i"fastlstm1.four_parts.W.k-256-384.split-over-1.256..512_a", transposeA = false, transposeB = false);
  i"fastlstm1.four_parts.W.k-add-0.split-over-1.256..512" = add(i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512", i"fastlstm1.four_parts.W.k-256-384.split-over-1.256..512");
  i"fastlstm1.four_parts.split-over-1.256..512" = add(i"fastlstm1.four_parts.W.k-add-0.split-over-1.256..512", i"fastlstm1.four_parts.split-1-over-1.256..512.slice");
  i"fastlstm1.peephole1.output" = add(i"fastlstm1.peephole1.mul", i"fastlstm1.four_parts.split-over-1.256..512");
  i"fastlstm1.peephole1.output.nolin" = sigmoid(i"fastlstm1.peephole1.output");
  i"fastlstm1.c_prop" = mul(i"fastlstm1.peephole1.output.nolin", i"fastlstm1.c");
  i"fastlstm1.c_new" = add(i"fastlstm1.c_update", i"fastlstm1.c_prop");
  i"fastlstm1.tanh_c" = tanh(i"fastlstm1.c_new");
  i"fastlstm1.peephole2.mul" = mul(i"fastlstm1.peephole2.mul.fix-rank-0-1", i"fastlstm1.c_new");
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024" = matmul(i"fastlstm1.r", i"fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024_a", transposeA = false, transposeB = false);
  i"fastlstm1.four_parts.W.k-add-0.split-over-1.768..1024" = add(i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024", i"fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024");
  i"fastlstm1.four_parts.split-over-1.768..1024" = add(i"fastlstm1.four_parts.W.k-add-0.split-over-1.768..1024", i"fastlstm1.four_parts.split-1-over-1.768..1024.slice");
  i"fastlstm1.peephole2.output" = add(i"fastlstm1.peephole2.mul", i"fastlstm1.four_parts.split-over-1.768..1024");
  i"fastlstm1.peephole2.output.nolin" = sigmoid(i"fastlstm1.peephole2.output");
  i"fastlstm1.m" = mul(i"fastlstm1.tanh_c", i"fastlstm1.peephole2.output.nolin");
  i"fastlstm1.h_new.W.split-over-1.0..128" = matmul(i"fastlstm1.m", i"fastlstm1.h_new.W.split-over-1.0..128_a", transposeA = false, transposeB = false);
  i"fastlstm1.h_new.split-over-1.0..128" = add(i"fastlstm1.h_new.W.split-over-1.0..128", i"fastlstm1.h_new.split-1-over-1.0..128.slice");
  i"fastlstm1.r_new" = i"fastlstm1.h_new.split-over-1.0..128";
}

fragment scan_body_1(
    i"fastlstm2.c": tensor<scalar>,
    i"fastlstm2.r": tensor<scalar>,
    i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256": tensor<scalar>,
    i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768": tensor<scalar>,
    i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512": tensor<scalar>,
    i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024": tensor<scalar>,
    i"fastlstm2.four_parts.W.k-256-384.split-over-1.0..256_a": tensor<scalar>,
    i"fastlstm2.four_parts.W.k-256-384.split-over-1.256..512_a": tensor<scalar>,
    i"fastlstm2.four_parts.W.k-256-384.split-over-1.512..768_a": tensor<scalar>,
    i"fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024_a": tensor<scalar>,
    i"fastlstm2.four_parts.split-1-over-1.0..256.slice": tensor<scalar>,
    i"fastlstm2.four_parts.split-1-over-1.256..512.slice": tensor<scalar>,
    i"fastlstm2.four_parts.split-1-over-1.512..768.slice": tensor<scalar>,
    i"fastlstm2.four_parts.split-1-over-1.768..1024.slice": tensor<scalar>,
    i"fastlstm2.h_new.W.split-over-1.0..128_a": tensor<scalar>,
    i"fastlstm2.h_new.split-1-over-1.0..128.slice": tensor<scalar>,
    i"fastlstm2.peephole0.mul.fix-rank-0-1": tensor<scalar>,
    i"fastlstm2.peephole1.mul.fix-rank-0-1": tensor<scalar>,
    i"fastlstm2.peephole2.mul.fix-rank-0-1": tensor<scalar>
) -> (i"fastlstm2.c_new": tensor<scalar>, i"fastlstm2.r_new": tensor<scalar>, i"fastlstm2.m": tensor<scalar>)
{
  i"fastlstm2.peephole0.mul" = mul(i"fastlstm2.peephole0.mul.fix-rank-0-1", i"fastlstm2.c");
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.0..256" = matmul(i"fastlstm2.r", i"fastlstm2.four_parts.W.k-256-384.split-over-1.0..256_a", transposeA = false, transposeB = false);
  i"fastlstm2.four_parts.W.k-add-0.split-over-1.0..256" = add(i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256", i"fastlstm2.four_parts.W.k-256-384.split-over-1.0..256");
  i"fastlstm2.four_parts.split-over-1.0..256" = add(i"fastlstm2.four_parts.W.k-add-0.split-over-1.0..256", i"fastlstm2.four_parts.split-1-over-1.0..256.slice");
  i"fastlstm2.peephole0.output" = add(i"fastlstm2.peephole0.mul", i"fastlstm2.four_parts.split-over-1.0..256");
  i"fastlstm2.peephole0.output.nolin" = sigmoid(i"fastlstm2.peephole0.output");
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.512..768" = matmul(i"fastlstm2.r", i"fastlstm2.four_parts.W.k-256-384.split-over-1.512..768_a", transposeA = false, transposeB = false);
  i"fastlstm2.four_parts.W.k-add-0.split-over-1.512..768" = add(i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768", i"fastlstm2.four_parts.W.k-256-384.split-over-1.512..768");
  i"fastlstm2.four_parts.split-over-1.512..768" = add(i"fastlstm2.four_parts.W.k-add-0.split-over-1.512..768", i"fastlstm2.four_parts.split-1-over-1.512..768.slice");
  i"fastlstm2.four_parts.j.nolin" = tanh(i"fastlstm2.four_parts.split-over-1.512..768");
  i"fastlstm2.c_update" = mul(i"fastlstm2.peephole0.output.nolin", i"fastlstm2.four_parts.j.nolin");
  i"fastlstm2.peephole1.mul" = mul(i"fastlstm2.peephole1.mul.fix-rank-0-1", i"fastlstm2.c");
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.256..512" = matmul(i"fastlstm2.r", i"fastlstm2.four_parts.W.k-256-384.split-over-1.256..512_a", transposeA = false, transposeB = false);
  i"fastlstm2.four_parts.W.k-add-0.split-over-1.256..512" = add(i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512", i"fastlstm2.four_parts.W.k-256-384.split-over-1.256..512");
  i"fastlstm2.four_parts.split-over-1.256..512" = add(i"fastlstm2.four_parts.W.k-add-0.split-over-1.256..512", i"fastlstm2.four_parts.split-1-over-1.256..512.slice");
  i"fastlstm2.peephole1.output" = add(i"fastlstm2.peephole1.mul", i"fastlstm2.four_parts.split-over-1.256..512");
  i"fastlstm2.peephole1.output.nolin" = sigmoid(i"fastlstm2.peephole1.output");
  i"fastlstm2.c_prop" = mul(i"fastlstm2.peephole1.output.nolin", i"fastlstm2.c");
  i"fastlstm2.c_new" = add(i"fastlstm2.c_update", i"fastlstm2.c_prop");
  i"fastlstm2.tanh_c" = tanh(i"fastlstm2.c_new");
  i"fastlstm2.peephole2.mul" = mul(i"fastlstm2.peephole2.mul.fix-rank-0-1", i"fastlstm2.c_new");
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024" = matmul(i"fastlstm2.r", i"fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024_a", transposeA = false, transposeB = false);
  i"fastlstm2.four_parts.W.k-add-0.split-over-1.768..1024" = add(i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024", i"fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024");
  i"fastlstm2.four_parts.split-over-1.768..1024" = add(i"fastlstm2.four_parts.W.k-add-0.split-over-1.768..1024", i"fastlstm2.four_parts.split-1-over-1.768..1024.slice");
  i"fastlstm2.peephole2.output" = add(i"fastlstm2.peephole2.mul", i"fastlstm2.four_parts.split-over-1.768..1024");
  i"fastlstm2.peephole2.output.nolin" = sigmoid(i"fastlstm2.peephole2.output");
  i"fastlstm2.m" = mul(i"fastlstm2.tanh_c", i"fastlstm2.peephole2.output.nolin");
  i"fastlstm2.h_new.W.split-over-1.0..128" = matmul(i"fastlstm2.m", i"fastlstm2.h_new.W.split-over-1.0..128_a", transposeA = false, transposeB = false);
  i"fastlstm2.h_new.split-over-1.0..128" = add(i"fastlstm2.h_new.W.split-over-1.0..128", i"fastlstm2.h_new.split-1-over-1.0..128.slice");
  i"fastlstm2.r_new" = i"fastlstm2.h_new.split-over-1.0..128";
}

fragment tract_core_properties(
) -> (properties: (string, tensor<scalar>)[])
{
  properties = [("pulse.delay", tract_core_cast([6], to = "i64")), ("pulse.input_axes", tract_core_cast([0], to = "i64")), ("pulse.output_axes", tract_core_cast([0], to = "i64")), ("tract_nnef_ser_version", "0.19.3-pre"), ("tract_nnef_format_version", "beta1")];
}

graph network(input) -> (output) {
  input = external(shape = [24, 40]);
  i"lda.output.delay" = tract_pulse_delay(input, axis = 0, delay = 0, overlap = 4);
  i"lda.output_input" = transpose(unsqueeze(i"lda.output.delay", axes = [0]), axes = [0, 2, 1]);
  i"lda.output_weigths" = variable<scalar>(label = "lda.output_weigths", shape = [200, 40, 5]);
  i"lda.output_bias" = variable<scalar>(label = "lda.output_bias", shape = [200]);
  i"lda.output_conv" = conv(i"lda.output_input", i"lda.output_weigths", i"lda.output_bias", dilation = [1], stride = [1], border = "constant", groups = 1, padding = [(0, 0)]);
  i"lda.output" = squeeze(transpose(i"lda.output_conv", axes = [0, 2, 1]), axes = [0]);
  i"tdnn1.affine.output.matmul_a" = variable<scalar>(label = "tdnn1.affine.output.matmul_a", shape = [256, 200]);
  i"tdnn1.affine.output.matmul" = matmul(i"lda.output", i"tdnn1.affine.output.matmul_a", transposeA = false, transposeB = true);
  i"tdnn1.affine.output.bias.cst" = variable<scalar>(label = "tdnn1.affine.output.bias.cst", shape = [1, 256]);
  i"tdnn1.affine.output.bias" = add(i"tdnn1.affine.output.matmul", i"tdnn1.affine.output.bias.cst");
  i"tdnn1.relu.output.low.cst" = [[0.0]];
  i"tdnn1.relu.output.low" = max(i"tdnn1.affine.output.bias", i"tdnn1.relu.output.low.cst");
  i"tdnn1.renorm.reduced.sq" = square(i"tdnn1.relu.output.low");
  i"tdnn1.renorm.reduced.sum" = sum_reduce(i"tdnn1.renorm.reduced.sq", axes = [1]);
  i"tdnn1.renorm.scaled-recip" = [[0.00390625]];
  i"tdnn1.renorm.scaled" = mul(i"tdnn1.renorm.reduced.sum", i"tdnn1.renorm.scaled-recip");
  i"tdnn1.renorm.norm" = sqrt(i"tdnn1.renorm.scaled");
  i"tdnn1.renorm.output" = div(i"tdnn1.relu.output.low", i"tdnn1.renorm.norm");
  i"tdnn2.affine.output.delay" = tract_pulse_delay(i"tdnn1.renorm.output", axis = 0, delay = 0, overlap = 2);
  i"tdnn2.affine.output_input" = transpose(unsqueeze(i"tdnn2.affine.output.delay", axes = [0]), axes = [0, 2, 1]);
  i"tdnn2.affine.output_weigths" = variable<scalar>(label = "tdnn2.affine.output_weigths", shape = [256, 256, 3]);
  i"tdnn2.affine.output_bias" = variable<scalar>(label = "tdnn2.affine.output_bias", shape = [256]);
  i"tdnn2.affine.output_conv" = conv(i"tdnn2.affine.output_input", i"tdnn2.affine.output_weigths", i"tdnn2.affine.output_bias", dilation = [1], stride = [1], border = "constant", groups = 1, padding = [(0, 0)]);
  i"tdnn2.affine.output" = squeeze(transpose(i"tdnn2.affine.output_conv", axes = [0, 2, 1]), axes = [0]);
  i"tdnn2.relu.output.low.cst" = [[0.0]];
  i"tdnn2.relu.output.low" = max(i"tdnn2.affine.output", i"tdnn2.relu.output.low.cst");
  i"tdnn2.renorm.reduced.sq" = square(i"tdnn2.relu.output.low");
  i"tdnn2.renorm.reduced.sum" = sum_reduce(i"tdnn2.renorm.reduced.sq", axes = [1]);
  i"tdnn2.renorm.scaled-recip" = [[0.00390625]];
  i"tdnn2.renorm.scaled" = mul(i"tdnn2.renorm.reduced.sum", i"tdnn2.renorm.scaled-recip");
  i"tdnn2.renorm.norm" = sqrt(i"tdnn2.renorm.scaled");
  i"tdnn2.renorm.output" = div(i"tdnn2.relu.output.low", i"tdnn2.renorm.norm");
  i"tdnn3.affine.output_input" = transpose(unsqueeze(i"tdnn2.renorm.output", axes = [0]), axes = [0, 2, 1]);
  i"tdnn3.affine.output_weigths" = variable<scalar>(label = "tdnn3.affine.output_weigths", shape = [256, 256, 3]);
  i"tdnn3.affine.output_bias" = variable<scalar>(label = "tdnn3.affine.output_bias", shape = [256]);
  i"tdnn3.affine.output_conv" = conv(i"tdnn3.affine.output_input", i"tdnn3.affine.output_weigths", i"tdnn3.affine.output_bias", dilation = [1], stride = [3], border = "constant", groups = 1, padding = [(0, 0)]);
  i"tdnn3.affine.output" = squeeze(transpose(i"tdnn3.affine.output_conv", axes = [0, 2, 1]), axes = [0]);
  i"tdnn3.relu.output.low.cst" = [[0.0]];
  i"tdnn3.relu.output.low" = max(i"tdnn3.affine.output", i"tdnn3.relu.output.low.cst");
  i"tdnn3.renorm.reduced.sq" = square(i"tdnn3.relu.output.low");
  i"tdnn3.renorm.reduced.sum" = sum_reduce(i"tdnn3.renorm.reduced.sq", axes = [1]);
  i"tdnn3.renorm.scaled-recip" = [[0.00390625]];
  i"tdnn3.renorm.scaled" = mul(i"tdnn3.renorm.reduced.sum", i"tdnn3.renorm.scaled-recip");
  i"tdnn3.renorm.norm" = sqrt(i"tdnn3.renorm.scaled");
  i"tdnn3.renorm.output" = div(i"tdnn3.relu.output.low", i"tdnn3.renorm.norm");
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256_a" = variable<scalar>(label = "fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256_a", shape = [256, 256]);
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256" = matmul(i"tdnn3.renorm.output", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256_a", transposeA = false, transposeB = false);
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768_a" = variable<scalar>(label = "fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768_a", shape = [256, 256]);
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768" = matmul(i"tdnn3.renorm.output", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768_a", transposeA = false, transposeB = false);
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512_a" = variable<scalar>(label = "fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512_a", shape = [256, 256]);
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512" = matmul(i"tdnn3.renorm.output", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512_a", transposeA = false, transposeB = false);
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024_a" = variable<scalar>(label = "fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024_a", shape = [256, 256]);
  i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024" = matmul(i"tdnn3.renorm.output", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024_a", transposeA = false, transposeB = false);
  i"fastlstm1.c_final_state_init_0" = variable<scalar>(label = "fastlstm1.c_final_state_init_0", shape = [1, 256]);
  i"fastlstm1.c_final_state_init_1" = variable<scalar>(label = "fastlstm1.c_final_state_init_1", shape = [1, 128]);
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.0..256_a" = variable<scalar>(label = "fastlstm1.four_parts.W.k-256-384.split-over-1.0..256_a", shape = [128, 256]);
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.256..512_a" = variable<scalar>(label = "fastlstm1.four_parts.W.k-256-384.split-over-1.256..512_a", shape = [128, 256]);
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.512..768_a" = variable<scalar>(label = "fastlstm1.four_parts.W.k-256-384.split-over-1.512..768_a", shape = [128, 256]);
  i"fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024_a" = variable<scalar>(label = "fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024_a", shape = [128, 256]);
  i"fastlstm1.four_parts.split-1-over-1.0..256.slice" = variable<scalar>(label = "fastlstm1.four_parts.split-1-over-1.0..256.slice", shape = [1, 256]);
  i"fastlstm1.four_parts.split-1-over-1.256..512.slice" = variable<scalar>(label = "fastlstm1.four_parts.split-1-over-1.256..512.slice", shape = [1, 256]);
  i"fastlstm1.four_parts.split-1-over-1.512..768.slice" = variable<scalar>(label = "fastlstm1.four_parts.split-1-over-1.512..768.slice", shape = [1, 256]);
  i"fastlstm1.four_parts.split-1-over-1.768..1024.slice" = variable<scalar>(label = "fastlstm1.four_parts.split-1-over-1.768..1024.slice", shape = [1, 256]);
  i"fastlstm1.h_new.W.split-over-1.0..128_a" = variable<scalar>(label = "fastlstm1.h_new.W.split-over-1.0..128_a", shape = [256, 128]);
  i"fastlstm1.h_new.split-1-over-1.0..128.slice" = variable<scalar>(label = "fastlstm1.h_new.split-1-over-1.0..128.slice", shape = [1, 128]);
  i"fastlstm1.peephole0.mul.fix-rank-0-1" = variable<scalar>(label = "fastlstm1.peephole0.mul.fix-rank-0-1", shape = [1, 256]);
  i"fastlstm1.peephole1.mul.fix-rank-0-1" = variable<scalar>(label = "fastlstm1.peephole1.mul.fix-rank-0-1", shape = [1, 256]);
  i"fastlstm1.peephole2.mul.fix-rank-0-1" = variable<scalar>(label = "fastlstm1.peephole2.mul.fix-rank-0-1", shape = [1, 256]);
  ( i"fastlstm1.c_final", i"fastlstm1.c_final_1" ) = tract_core_scan(body = "scan_body_0", scan = [("fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.0..256", 0, 1), ("fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.512..768", 0, 1), ("fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.256..512", 0, 1), ("fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024", i"fastlstm1.c_final.extracted.fastlstm1.four_parts.W.k-0-256.split-over-1.768..1024", 0, 1)], full = [("fastlstm1.four_parts.W.k-256-384.split-over-1.0..256_a", i"fastlstm1.four_parts.W.k-256-384.split-over-1.0..256_a"), ("fastlstm1.four_parts.W.k-256-384.split-over-1.256..512_a", i"fastlstm1.four_parts.W.k-256-384.split-over-1.256..512_a"), ("fastlstm1.four_parts.W.k-256-384.split-over-1.512..768_a", i"fastlstm1.four_parts.W.k-256-384.split-over-1.512..768_a"), ("fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024_a", i"fastlstm1.four_parts.W.k-256-384.split-over-1.768..1024_a"), ("fastlstm1.four_parts.split-1-over-1.0..256.slice", i"fastlstm1.four_parts.split-1-over-1.0..256.slice"), ("fastlstm1.four_parts.split-1-over-1.256..512.slice", i"fastlstm1.four_parts.split-1-over-1.256..512.slice"), ("fastlstm1.four_parts.split-1-over-1.512..768.slice", i"fastlstm1.four_parts.split-1-over-1.512..768.slice"), ("fastlstm1.four_parts.split-1-over-1.768..1024.slice", i"fastlstm1.four_parts.split-1-over-1.768..1024.slice"), ("fastlstm1.h_new.W.split-over-1.0..128_a", i"fastlstm1.h_new.W.split-over-1.0..128_a"), ("fastlstm1.h_new.split-1-over-1.0..128.slice", i"fastlstm1.h_new.split-1-over-1.0..128.slice"), ("fastlstm1.peephole0.mul.fix-rank-0-1", i"fastlstm1.peephole0.mul.fix-rank-0-1"), ("fastlstm1.peephole1.mul.fix-rank-0-1", i"fastlstm1.peephole1.mul.fix-rank-0-1"), ("fastlstm1.peephole2.mul.fix-rank-0-1", i"fastlstm1.peephole2.mul.fix-rank-0-1")], state = [("fastlstm1.c", i"fastlstm1.c_final_state_init_0", "fastlstm1.c_new"), ("fastlstm1.r", i"fastlstm1.c_final_state_init_1", "fastlstm1.r_new")], output = [("fastlstm1.r_new", "full", 0, 1), ("fastlstm1.m", "full", 0, 1)], skip = 2);
  i"fastlstm1.h_new.W.split-over-1.128..256_a" = variable<scalar>(label = "fastlstm1.h_new.W.split-over-1.128..256_a", shape = [256, 128]);
  i"fastlstm1.h_new.W.split-over-1.128..256" = matmul(i"fastlstm1.c_final_1", i"fastlstm1.h_new.W.split-over-1.128..256_a", transposeA = false, transposeB = false);
  i"fastlstm1.c_final.fastlstm1.h_new.split-1-over-1.128..256.slice" = variable<scalar>(label = "fastlstm1.c_final.fastlstm1.h_new.split-1-over-1.128..256.slice", shape = [1, 128]);
  i"fastlstm1.h_new.split-over-1.128..256" = add(i"fastlstm1.h_new.W.split-over-1.128..256", i"fastlstm1.c_final.fastlstm1.h_new.split-1-over-1.128..256.slice");
  i"fastlstm1.h_new.concat-1" = concat([i"fastlstm1.c_final", i"fastlstm1.h_new.split-over-1.128..256"], axis = 1);
  i"tdnn4.affine.output.delay" = tract_pulse_delay(i"fastlstm1.h_new.concat-1", axis = 0, delay = 0, overlap = 2);
  i"tdnn4.affine.output_input" = transpose(unsqueeze(i"tdnn4.affine.output.delay", axes = [0]), axes = [0, 2, 1]);
  i"tdnn4.affine.output_weigths" = variable<scalar>(label = "tdnn4.affine.output_weigths", shape = [256, 256, 3]);
  i"tdnn4.affine.output_bias" = variable<scalar>(label = "tdnn4.affine.output_bias", shape = [256]);
  i"tdnn4.affine.output_conv" = conv(i"tdnn4.affine.output_input", i"tdnn4.affine.output_weigths", i"tdnn4.affine.output_bias", dilation = [1], stride = [1], border = "constant", groups = 1, padding = [(0, 0)]);
  i"tdnn4.affine.output" = squeeze(transpose(i"tdnn4.affine.output_conv", axes = [0, 2, 1]), axes = [0]);
  i"tdnn4.relu.output.low.cst" = [[0.0]];
  i"tdnn4.relu.output.low" = max(i"tdnn4.affine.output", i"tdnn4.relu.output.low.cst");
  i"tdnn4.renorm.reduced.sq" = square(i"tdnn4.relu.output.low");
  i"tdnn4.renorm.reduced.sum" = sum_reduce(i"tdnn4.renorm.reduced.sq", axes = [1]);
  i"tdnn4.renorm.scaled-recip" = [[0.00390625]];
  i"tdnn4.renorm.scaled" = mul(i"tdnn4.renorm.reduced.sum", i"tdnn4.renorm.scaled-recip");
  i"tdnn4.renorm.norm" = sqrt(i"tdnn4.renorm.scaled");
  i"tdnn4.renorm.output" = div(i"tdnn4.relu.output.low", i"tdnn4.renorm.norm");
  i"tdnn5.affine.output.delay" = tract_pulse_delay(i"tdnn4.renorm.output", axis = 0, delay = 0, overlap = 2);
  i"tdnn5.affine.output_input" = transpose(unsqueeze(i"tdnn5.affine.output.delay", axes = [0]), axes = [0, 2, 1]);
  i"tdnn5.affine.output_weigths" = variable<scalar>(label = "tdnn5.affine.output_weigths", shape = [256, 256, 3]);
  i"tdnn5.affine.output_bias" = variable<scalar>(label = "tdnn5.affine.output_bias", shape = [256]);
  i"tdnn5.affine.output_conv" = conv(i"tdnn5.affine.output_input", i"tdnn5.affine.output_weigths", i"tdnn5.affine.output_bias", dilation = [1], stride = [1], border = "constant", groups = 1, padding = [(0, 0)]);
  i"tdnn5.affine.output" = squeeze(transpose(i"tdnn5.affine.output_conv", axes = [0, 2, 1]), axes = [0]);
  i"tdnn5.relu.output.low.cst" = [[0.0]];
  i"tdnn5.relu.output.low" = max(i"tdnn5.affine.output", i"tdnn5.relu.output.low.cst");
  i"tdnn5.renorm.reduced.sq" = square(i"tdnn5.relu.output.low");
  i"tdnn5.renorm.reduced.sum" = sum_reduce(i"tdnn5.renorm.reduced.sq", axes = [1]);
  i"tdnn5.renorm.scaled-recip" = [[0.00390625]];
  i"tdnn5.renorm.scaled" = mul(i"tdnn5.renorm.reduced.sum", i"tdnn5.renorm.scaled-recip");
  i"tdnn5.renorm.norm" = sqrt(i"tdnn5.renorm.scaled");
  i"tdnn5.renorm.output" = div(i"tdnn5.relu.output.low", i"tdnn5.renorm.norm");
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256_a" = variable<scalar>(label = "fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256_a", shape = [256, 256]);
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256" = matmul(i"tdnn5.renorm.output", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256_a", transposeA = false, transposeB = false);
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768_a" = variable<scalar>(label = "fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768_a", shape = [256, 256]);
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768" = matmul(i"tdnn5.renorm.output", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768_a", transposeA = false, transposeB = false);
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512_a" = variable<scalar>(label = "fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512_a", shape = [256, 256]);
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512" = matmul(i"tdnn5.renorm.output", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512_a", transposeA = false, transposeB = false);
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024_a" = variable<scalar>(label = "fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024_a", shape = [256, 256]);
  i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024" = matmul(i"tdnn5.renorm.output", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024_a", transposeA = false, transposeB = false);
  i"fastlstm2.c_final_state_init_0" = variable<scalar>(label = "fastlstm2.c_final_state_init_0", shape = [1, 256]);
  i"fastlstm2.c_final_state_init_1" = variable<scalar>(label = "fastlstm2.c_final_state_init_1", shape = [1, 128]);
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.0..256_a" = variable<scalar>(label = "fastlstm2.four_parts.W.k-256-384.split-over-1.0..256_a", shape = [128, 256]);
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.256..512_a" = variable<scalar>(label = "fastlstm2.four_parts.W.k-256-384.split-over-1.256..512_a", shape = [128, 256]);
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.512..768_a" = variable<scalar>(label = "fastlstm2.four_parts.W.k-256-384.split-over-1.512..768_a", shape = [128, 256]);
  i"fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024_a" = variable<scalar>(label = "fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024_a", shape = [128, 256]);
  i"fastlstm2.four_parts.split-1-over-1.0..256.slice" = variable<scalar>(label = "fastlstm2.four_parts.split-1-over-1.0..256.slice", shape = [1, 256]);
  i"fastlstm2.four_parts.split-1-over-1.256..512.slice" = variable<scalar>(label = "fastlstm2.four_parts.split-1-over-1.256..512.slice", shape = [1, 256]);
  i"fastlstm2.four_parts.split-1-over-1.512..768.slice" = variable<scalar>(label = "fastlstm2.four_parts.split-1-over-1.512..768.slice", shape = [1, 256]);
  i"fastlstm2.four_parts.split-1-over-1.768..1024.slice" = variable<scalar>(label = "fastlstm2.four_parts.split-1-over-1.768..1024.slice", shape = [1, 256]);
  i"fastlstm2.h_new.W.split-over-1.0..128_a" = variable<scalar>(label = "fastlstm2.h_new.W.split-over-1.0..128_a", shape = [256, 128]);
  i"fastlstm2.h_new.split-1-over-1.0..128.slice" = variable<scalar>(label = "fastlstm2.h_new.split-1-over-1.0..128.slice", shape = [1, 128]);
  i"fastlstm2.peephole0.mul.fix-rank-0-1" = variable<scalar>(label = "fastlstm2.peephole0.mul.fix-rank-0-1", shape = [1, 256]);
  i"fastlstm2.peephole1.mul.fix-rank-0-1" = variable<scalar>(label = "fastlstm2.peephole1.mul.fix-rank-0-1", shape = [1, 256]);
  i"fastlstm2.peephole2.mul.fix-rank-0-1" = variable<scalar>(label = "fastlstm2.peephole2.mul.fix-rank-0-1", shape = [1, 256]);
  ( i"fastlstm2.c_final", i"fastlstm2.c_final_1" ) = tract_core_scan(body = "scan_body_1", scan = [("fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.0..256", 0, 1), ("fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.512..768", 0, 1), ("fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.256..512", 0, 1), ("fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024", i"fastlstm2.c_final.extracted.fastlstm2.four_parts.W.k-0-256.split-over-1.768..1024", 0, 1)], full = [("fastlstm2.four_parts.W.k-256-384.split-over-1.0..256_a", i"fastlstm2.four_parts.W.k-256-384.split-over-1.0..256_a"), ("fastlstm2.four_parts.W.k-256-384.split-over-1.256..512_a", i"fastlstm2.four_parts.W.k-256-384.split-over-1.256..512_a"), ("fastlstm2.four_parts.W.k-256-384.split-over-1.512..768_a", i"fastlstm2.four_parts.W.k-256-384.split-over-1.512..768_a"), ("fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024_a", i"fastlstm2.four_parts.W.k-256-384.split-over-1.768..1024_a"), ("fastlstm2.four_parts.split-1-over-1.0..256.slice", i"fastlstm2.four_parts.split-1-over-1.0..256.slice"), ("fastlstm2.four_parts.split-1-over-1.256..512.slice", i"fastlstm2.four_parts.split-1-over-1.256..512.slice"), ("fastlstm2.four_parts.split-1-over-1.512..768.slice", i"fastlstm2.four_parts.split-1-over-1.512..768.slice"), ("fastlstm2.four_parts.split-1-over-1.768..1024.slice", i"fastlstm2.four_parts.split-1-over-1.768..1024.slice"), ("fastlstm2.h_new.W.split-over-1.0..128_a", i"fastlstm2.h_new.W.split-over-1.0..128_a"), ("fastlstm2.h_new.split-1-over-1.0..128.slice", i"fastlstm2.h_new.split-1-over-1.0..128.slice"), ("fastlstm2.peephole0.mul.fix-rank-0-1", i"fastlstm2.peephole0.mul.fix-rank-0-1"), ("fastlstm2.peephole1.mul.fix-rank-0-1", i"fastlstm2.peephole1.mul.fix-rank-0-1"), ("fastlstm2.peephole2.mul.fix-rank-0-1", i"fastlstm2.peephole2.mul.fix-rank-0-1")], state = [("fastlstm2.c", i"fastlstm2.c_final_state_init_0", "fastlstm2.c_new"), ("fastlstm2.r", i"fastlstm2.c_final_state_init_1", "fastlstm2.r_new")], output = [("fastlstm2.r_new", "full", 0, 1), ("fastlstm2.m", "full", 0, 1)], skip = 6);
  i"output.affine.output.W.k-0-128_a" = variable<scalar>(label = "output.affine.output.W.k-0-128_a", shape = [1690, 128]);
  i"output.affine.output.W.k-0-128" = matmul(i"fastlstm2.c_final", i"output.affine.output.W.k-0-128_a", transposeA = false, transposeB = true);
  i"fastlstm2.h_new.W.split-over-1.128..256_a" = variable<scalar>(label = "fastlstm2.h_new.W.split-over-1.128..256_a", shape = [256, 128]);
  i"fastlstm2.h_new.W.split-over-1.128..256" = matmul(i"fastlstm2.h_new.W.split-over-1.128..256_a", i"fastlstm2.c_final_1", transposeA = true, transposeB = true);
  i"fastlstm2.c_final.fastlstm2.h_new.split-1-over-1.128..256.slice" = variable<scalar>(label = "fastlstm2.c_final.fastlstm2.h_new.split-1-over-1.128..256.slice", shape = [128, 1]);
  i"fastlstm2.h_new.split-over-1.128..256" = add(i"fastlstm2.h_new.W.split-over-1.128..256", i"fastlstm2.c_final.fastlstm2.h_new.split-1-over-1.128..256.slice");
  i"output.affine.output.W.k-128-256_a" = variable<scalar>(label = "output.affine.output.W.k-128-256_a", shape = [1690, 128]);
  i"output.affine.output.W.k-128-256" = matmul(i"fastlstm2.h_new.split-over-1.128..256", i"output.affine.output.W.k-128-256_a", transposeA = true, transposeB = true);
  i"output.affine.output.W.k-add-0" = add(i"output.affine.output.W.k-0-128", i"output.affine.output.W.k-128-256");
  i"output.affine.bias.0" = variable<scalar>(label = "output.affine.bias.0", shape = [1, 1690]);
  i"output.affine.output" = add(i"output.affine.output.W.k-add-0", i"output.affine.bias.0");
  output = i"output.affine.output";
}
